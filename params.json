{"name":"unexceptional-javac","body":"## What is unexceptional-javac\r\nunexceptional-javac is a fork of `javac` that treats all exceptions as runtime exceptions. In other words it disables the compile time requirement to handle checked exceptions in your code. For example the follow code will compile:\r\n\r\n```java\r\nprivate void doSomething() throws IOException {\r\n  // Some IO related operation here.\r\n}\r\n\r\npublic void doSomethingElse() {\r\n  doSomething();\r\n}\r\n```\r\n\r\n## Why unexceptional-javac?\r\nChecked exceptions are apparently a pretty emotive topic as you can see here: [The case against checked exceptions].(http://stackoverflow.com/questions/613954/the-case-against-checked-exceptions) I personally feel that they offer little value when specifying coding contracts and instead require lots of boiler plate code that obfuscates the purpose of the code it wraps. Many other modern languages haven't bothered with checked exceptions so it is certainly possible to live without them ;-)\r\n\r\n## Installation\r\nComing soon... basically switch out your tools.jar file in the JDK.\r\n\r\n## IDE Support\r\n### Intellij IDEA\r\nComing soon...\r\n\r\n### Eclipse\r\nComing soon...\r\n\r\n### NetBeans\r\nComing soon...","tagline":"","google":"UA-31020125-1","note":"Don't delete this file! It's used internally to help with page regeneration."}